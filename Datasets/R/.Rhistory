names(pop)
c(1,55:66)
pop[c(1,55:66)]
pop[c(1,55:66),]
pop[,c(1,55:66)]
pop[77,]
head(pop[,c(1,55:66)])
pop[,c(1,55:66)]
names(pop)
pop[,c(2,55:66)]
c(2,55:66)
pop = pop[,c(2,55:66)]
pop[77,]
pop
pop[70,]
pop = read.csv("API_SP.POP.TOTL_DS2_en_csv_v2_4570891.csv", check.names = F)
pop = pop[,c(2,55:66)]
merge(decision_regions, pop, by.x = "Country of asylum (ISO)", "Country Code")
copy = merge(decision_regions, pop, by.x = "Country of asylum (ISO)", "Country Code")
names(copy)
pop = read.csv("API_SP.POP.TOTL_DS2_en_csv_v2_4570891.csv", check.names = F)
pop = pop[,c(2,55:66)]
head(pop,1)
library(dplyr)
?pivot_longer
library(tidyr)
?pivot_longer
2:ncol(pop)
pop %>% pivot_longer(cols = 2:ncol(pop), names_to = "Attribute", values_to = "Year")
pop %>% pivot_longer(cols = 2:ncol(pop), names_to = "Attribute")
iris
head(iris)
pop %>% pivot_longer(cols = 2:ncol(pop), names_to = "Attribute")
head(iris)
pop %>% pivot_longer(cols = 2:ncol(pop), names_to = "Year", values_to = "Population")
pop = pop %>% pivot_longer(cols = 2:ncol(pop), names_to = "Year", values_to = "Population")
pop = read.csv("API_SP.POP.TOTL_DS2_en_csv_v2_4570891.csv", check.names = F)
pop = pop[,c(2,55:66)]
library(tidyr)
pop = pop %>% pivot_longer(cols = 2:ncol(pop), names_to = "Year", values_to = "Population")
head(pop)
names(decision_regions)
copy = merge(decision_regions, pop, by.x = c("Country of asylum (ISO)", "Year"),
c("Country Code", "Year"))
copy[copy$Year == 2010 & copy$`Country of asylum (ISO)` == "ABW",]
copy[copy$Year == 2010 & copy$`Country of asylum (ISO)` == "ABW"]
copy[copy$Year == 2010 & copy$`Country of asylum (ISO)` == "ABW",]
copy[copy$Year == 2010,]
copy[copy$Year == 2010 & copy$`Country of asylum (ISO)` == "AUS",]
copy[copy$`Country of asylum (ISO)` == "AUS",]
copy[copy$`Country of asylum (ISO)` == "AUS",][c(2,9)]
pop[pop$`Country Code` == "AUS"]
pop[pop$`Country Code` == "AUS",]
copy[copy$`Country of asylum (ISO)` == "AUS",][c(2,9)]
head(copy)
copy[1] = NULL
head(copy)
decision_regions$`Acceptance Rate` = decision_regions$`Complementary protection`/
decision_regions$`Total decisions`
decision_regions$`Rejection Rate` = decision_regions$`Rejected decisions`/
decision_regions$`Total decisions`
head(decision_regions)
decisions = read.csv("asylum-decisions.csv", check.names = F)
head(decisions)
decisions[c(2,3,6,7,8,9,12)] = NULL
names(decisions)
copy = aggregate(x = decisions[c(10,11,13)], by = decisions[c(1,4,5)], sum)
continents = read.csv("countryContinent.csv", check.names = F)
head(continents)
continents[c(1,2,4,5,8,9)] = NULL
names(continents)
names(copy)
decision_regions = merge(copy, continents, by.x = "Country of asylum (ISO)", by.y = "code_3")
head(decision_regions)
pop = read.csv("API_SP.POP.TOTL_DS2_en_csv_v2_4570891.csv", check.names = F)
pop = pop[,c(2,55:66)]
library(tidyr)
pop = pop %>% pivot_longer(cols = 2:ncol(pop), names_to = "Year", values_to = "Population")
names(decision_regions)
decision_regions = merge(decision_regions, pop, by.x = c("Country of asylum (ISO)", "Year"),
c("Country Code", "Year"))
decision_regions[1] = NULL
head(copy)
head(decision_regions)
decision_regions$`Acceptance Rate` = decision_regions$`Complementary protection`/
decision_regions$`Total decisions`
decision_regions$`Rejection Rate` = decision_regions$`Rejected decisions`/
decision_regions$`Total decisions`
head(decision_regions)
write.csv(decision_regions, file = "acceptance rate of refugees by countries.csv",
row.names = F, quote = F)
decision_regions[decision_regions$`Country of asylum` == "Serbia and Kosovo: S/RES/1244 (1999)"]
decision_regions[decision_regions$`Country of asylum` == "Serbia and Kosovo: S/RES/1244 (1999)",]
serbia_indices = decision_regions$`Country of asylum` == "Serbia and Kosovo: S/RES/1244 (1999)",
decision_regions[]
serbia_indices = decision_regions$`Country of asylum` == "Serbia and Kosovo: S/RES/1244 (1999)"
decision_regions[serbia_indices,]
decision_regions[serbia_indices,]$`Country of asylum` = "Serbia"
decision_regions[serbia_indices,]
write.csv(decision_regions, file = "acceptance rate of refugees by countries.csv",
row.names = F, quote = F)
a_rate = read.csv("acceptance rate of refugees by countries.csv", check.names = F, stringsAsFactors = T)
head(a_rate)
copy = aggregate(a_rate[c(3,4,5)], a_rate[c(1,6,7)])
copy = aggregate(a_rate[c(3,4,5)], a_rate[c(1,6,7)], sum)
copy = aggregate(a_rate[c(3,4,5)], by = a_rate[c(1,6,7)], sum)
a_rate[c(3,4,5)]
copy = ?aggregate(a_rate[c(3,4,5)], by = a_rate[c(1,6,7)], sum)
?aggregate
copy = aggregate(a_rate[c(3,4,5)], by = a_rate[c(1,6,7)], sum)
a_rate[c(1,6,7)]
copy = aggregate(x = a_rate[c(3,4,5)], by = a_rate[c(1,6,7)], sum)
copy = aggregate(x = a_rate[c(3,4,5)], by = a_rate[c(1,6,7)], FUN = sum)
a_rate = read.csv("acceptance rate of refugees by countries.csv", check.names = F)
head(a_rate)
copy = aggregate(x = a_rate[c(3,4,5)], by = a_rate[c(1,6,7)], FUN = sum)
head(a_rate[c(3,4,5)])
head(a_rate[c(1,6,7)])
decisions[c(10,11,13)]
decisions[c(10,11,13),]
decisions[c(10,11,13)]
decisions[,c(10,11,13)]
decisions[c(10,11,13)]
a_rate = read.csv("acceptance rate of refugees by countries.csv", check.names = F)
head(a_rate)
head(a_rate[c(3,4,5)])
head(a_rate[c(1,6,7)])
copy = aggregate(x = a_rate[c(3,4,5)], by = a_rate[c(1,6,7)], FUN = sum)
copy = aggregate(by = a_rate[c(3,4,5)], x = a_rate[c(1,6,7)], FUN = sum)
aggregate(x = a_rate[c(3,4,5)], by = a_rate[c(1,6,7)], FUN = sum)
aggregate(x = a_rate[c(3,4,5)], by = a_rate[c(1)], FUN = sum)
a_rate[c(1,6,7)]
head(a_rate[c(3,4,5)])
aggregate(x = a_rate[c(3)], by = a_rate[c(1,6,7)], FUN = sum)
aggregate(x = a_rate[c(3,4,5)], by = a_rate[c(1,6,7)], FUN = sum, na.rm = T)
aggregate(x = a_rate[c(3,4,5)], by = a_rate[c(1,6,7)], FUN = sum, na.action = na.omit)
aggregate(x = a_rate[c(3,4,5)], by = a_rate[c(1,6,7)], FUN = sum)
aggregate(x = a_rate[,c(3,4,5)], by = a_rate[,c(1,6,7)], FUN = sum)
aggregate(a_rate[3])
aggregate(a_rate[3], a_rate[1], sum)
a_rate[1]
a_rate[1][1]
a_rate[1,1]
typeof(a_rate[1,1])
a_rate[3]
a_rate[1,3]
a_rate = read.csv("acceptance rate of refugees by countries.csv", check.names = F)
aggregate(x = a_rate[c(3,4,5)], by = a_rate[c(1,6,7)], FUN = sum)
a_rate[1,3]
a_rate[3]
head(a_rate[3])
integer(a_rate[3])
integer(a_rate[,3])
a_rate[,3]
a_rate[,3]
as.numeric(a_rate[,3])
a_rate[687:690,]
a_rate[687,]
a_rate[688,]
a_rate[688,1]
a_rate[688,2]
a_rate[688,3]
decisions = read.csv("asylum-decisions.csv", check.names = F)
head(decisions)
decisions[c(2,3,6,7,8,9,12)] = NULL
names(decisions)
copy = aggregate(x = decisions[c(10,11,13)], by = decisions[c(1,4,5)], sum)
continents = read.csv("countryContinent.csv", check.names = F)
head(continents)
unique(continents$country)
a = unique(continents$country)
write.csv(a, "country.txt")
decisions = read.csv("asylum-decisions.csv", check.names = F)
head(decisions)
rename_country = function (data, former_names, new_names)
{
for (i in 1:length(former_names))
{
print(c(f_name, n_name))
f_name = former_names[i]
n_name = new_names[i]
bool1 = data$`Country of Origin` == f_name
bool2 = data$`Country of Asylum` == f_name
if (sum(bool1) > 0) {
data[bool1, ]$`Country of Origin` = n_name
}
if (sum(bool2) > 0) {
data[bool2, ]$`Country of Asylum` = n_name
}
}
return(data)
}
former_names = c("Libyan Arab Jamahiriya", "Congo (Brazzaville)", "Palestinian Territory, Occupied",
"CÃ´te d'Ivoire", "Congo (Kinshasa)", "Macedonia, the former Yugoslav Republic of",
"Moldova, Republic of", "Holy See (Vatican City State)",
"Hong Kong S.A.R., China", "Korea, Democratic People's Republic of")
new_names = c("Libya", "Republic of the Congo", "Palestine","Ivory Coast",
"Democratic Republic of the Congo", "North Macedonia", "Moldova",
"Holy See (Vatican City)", "Hong Kong S.A.R.","North Korea")
decisions = read.csv("asylum-decisions.csv", check.names = F)
decisions = read.csv("asylum-decisions.csv", check.names = F)
rename_country(decisions)
rename_country(decisions, former_names, new_names)
decisions = rename_country(decisions, former_names, new_names)
head(decisions)
decisions[c(2,3,6,7,8,9,12)] = NULL
names(decisions)
copy = aggregate(x = decisions[c(10,11,13)], by = decisions[c(1,4,5)], sum)
continents = read.csv("countryContinent.csv", check.names = F)
head(continents)
a = unique(continents$country)
continents[c(1,2,4,5,8,9)] = NULL
rename_country = function (data, former_names, new_names)
{
for (i in 1:length(former_names))
{
print(c(f_name, n_name))
f_name = former_names[i]
n_name = new_names[i]
bool1 = data$`Country of Origin` == f_name
bool2 = data$`Country of Asylum` == f_name
if (sum(bool1) > 0) {
data[bool1, ]$`Country of Origin` = n_name
}
if (sum(bool2) > 0) {
data[bool2, ]$`Country of Asylum` = n_name
}
}
return(data)
}
former_names = c("Libyan Arab Jamahiriya", "Congo (Brazzaville)", "Palestinian Territory, Occupied",
"CÃ´te d'Ivoire", "Congo (Kinshasa)", "Macedonia, the former Yugoslav Republic of",
"Moldova, Republic of", "Holy See (Vatican City State)",
"Hong Kong S.A.R., China", "Korea, Democratic People's Republic of")
new_names = c("Libya", "Republic of the Congo", "Palestine","Ivory Coast",
"Democratic Republic of the Congo", "North Macedonia", "Moldova",
"Holy See (Vatican City)", "Hong Kong S.A.R.","North Korea")
decisions = read.csv("asylum-decisions.csv", check.names = F)
decisions = rename_country(decisions, former_names, new_names)
head(decisions)
decisions[c(2,3,6,7,8,9,12)] = NULL
names(decisions)
copy = aggregate(x = decisions[c(10,11,13)], by = decisions[c(1,4,5)], sum)
copy = aggregate(x = decisions[c(10,11,13)], by = decisions[c(1,4,5)], sum)
names(decisions)
decisions = read.csv("asylum-decisions.csv", check.names = F)
decisions = rename_country(decisions, former_names, new_names)
head(decisions)
decisions[c(2,3,6,7,8,9,12)] = NULL
names(decisions)
names(decisions)
copy = aggregate(x = decisions[c(10,11,13)], by = decisions[c(1,4,5)], sum)
# get asylum --------------------------------------------------------------
decisions[c(10,11,13)]
# get asylum --------------------------------------------------------------
decisions[c(10,11,13),]
decisions = read.csv("asylum-decisions.csv", check.names = F)
decisions = rename_country(decisions, former_names, new_names)
head(decisions)
decisions[c(2,3,6,7,8,9,12)] = NULL
rename_country = function (data, former_names, new_names)
{
for (i in 1:length(former_names))
{
print(c(f_name, n_name))
f_name = former_names[i]
n_name = new_names[i]
bool1 = data$`Country of Origin` == f_name
bool2 = data$`Country of Asylum` == f_name
if (sum(bool1) > 0) {
data[bool1, ]$`Country of Origin` = n_name
}
if (sum(bool2) > 0) {
data[bool2, ]$`Country of Asylum` = n_name
}
}
return(data)
}
former_names = c("Libyan Arab Jamahiriya", "Congo (Brazzaville)", "Palestinian Territory, Occupied",
"CÃ´te d'Ivoire", "Congo (Kinshasa)", "Macedonia, the former Yugoslav Republic of",
"Moldova, Republic of", "Holy See (Vatican City State)",
"Hong Kong S.A.R., China", "Korea, Democratic People's Republic of")
new_names = c("Libya", "Republic of the Congo", "Palestine","Ivory Coast",
"Democratic Republic of the Congo", "North Macedonia", "Moldova",
"Holy See (Vatican City)", "Hong Kong S.A.R.","North Korea")
decisions = read.csv("asylum-decisions.csv", check.names = F)
decisions = rename_country(decisions, former_names, new_names)
head(decisions)
decisions[c(2,3,6,7,8,9,12)] = NULL
names(decisions)
names(decisions)
copy = aggregate(x = decisions[c(10,11,13)], by = decisions[c(1,4,5)], sum)
rm(copy)
copy = aggregate(x = decisions[c(10,11,13)], by = decisions[c(1,4,5)], sum)
copy
copy = aggregate(x = decisions[c(10,11,13),], by = decisions[c(1,4,5)], sum)
copy = aggregate(x = decisions[,c(10,11,13)], by = decisions[,c(1,4,5)], sum)
decisions[,c(10,11,13)]
decisions = read.csv("asylum-decisions.csv", check.names = F)
head(decisions)
decisions[c(2,3,6,7,8,9,12)] = NULL
names(decisions)
names(decisions)
copy = aggregate(x = decisions[c(10,11,13)], by = decisions[c(1,4,5)], sum)
decisions = read.csv("asylum-decisions.csv", check.names = F)
decisions = rename_country(decisions, former_names, new_names)
head(decisions)
decisions[c(2,3,6,7,8,9,12)] = NULL
names(decisions)
names(decisions)
copy = aggregate(x = decisions[c(10,11,13)], by = decisions[c(1,4,5)], sum)
decisions = read.csv("asylum-decisions.csv", check.names = F)
decisions = rename_country(decisions, former_names, new_names)
copy = aggregate(x = decisions[c(10,11,13)], by = decisions[c(1,4,5)], sum)
continents = read.csv("countryContinent.csv", check.names = F)
head(continents)
View(copy)
View(copy)
rename_country = function (data, former_names, new_names)
{
for (i in 1:length(former_names))
{
print(c(f_name, n_name))
f_name = former_names[i]
n_name = new_names[i]
bool1 = data$`Country of Origin` == f_name
bool2 = data$`Country of Asylum` == f_name
if (sum(bool1) > 0) {
data[bool1, ]$`Country of Origin` = n_name
}
if (sum(bool2) > 0) {
data[bool2, ]$`Country of Asylum` = n_name
}
}
return(data)
}
former_names = c("Libyan Arab Jamahiriya", "Congo (Brazzaville)", "Palestinian Territory, Occupied",
"CÃ´te d'Ivoire", "Congo (Kinshasa)", "Macedonia, the former Yugoslav Republic of",
"Moldova, Republic of", "Holy See (Vatican City State)",
"Hong Kong S.A.R., China", "Korea, Democratic People's Republic of")
new_names = c("Libya", "Republic of the Congo", "Palestine","Ivory Coast",
"Democratic Republic of the Congo", "North Macedonia", "Moldova",
"Holy See (Vatican City)", "Hong Kong S.A.R.","North Korea")
decisions = read.csv("asylum-decisions.csv", check.names = F)
decisions = rename_country(decisions, former_names, new_names)
copy = aggregate(x = decisions[c(10,11,13)], by = decisions[c(1,4,5)], sum)
continents = read.csv("countryContinent.csv", check.names = F)
head(continents)
a = unique(continents$country)
continents[c(1,2,4,5,8,9)] = NULL
names(continents)
names(copy)
decision_regions = merge(copy, continents, by.x = "Country of asylum (ISO)", by.y = "code_3")
head(decision_regions)
pop = read.csv("API_SP.POP.TOTL_DS2_en_csv_v2_4570891.csv", check.names = F)
pop = pop[,c(2,55:66)]
library(tidyr)
pop = pop %>% pivot_longer(cols = 2:ncol(pop), names_to = "Year", values_to = "Population")
names(decision_regions)
decision_regions = merge(decision_regions, pop, by.x = c("Country of asylum (ISO)", "Year"),
c("Country Code", "Year"))
decision_regions[1] = NULL
head(decision_regions)
decision_regions$`Acceptance Rate` = decision_regions$`Complementary protection`/
decision_regions$`Total decisions`
decision_regions$`Rejection Rate` = decision_regions$`Rejected decisions`/
decision_regions$`Total decisions`
head(decision_regions)
serbia_indices = decision_regions$`Country of asylum` == "Serbia and Kosovo: S/RES/1244 (1999)"
decision_regions[serbia_indices,]$`Country of asylum` = "Serbia"
write.csv(decision_regions, file = "acceptance rate of refugees by countries.csv",
row.names = F, quote = F)
a_rate = read.csv("acceptance rate of refugees by countries.csv", check.names = F)
aggregate(x = a_rate[c(3,4,5)], by = a_rate[c(1,6,7)], FUN = sum)
aggregate(x = a_rate[,c(3,4,5)], by = a_rate[,c(1,6,7)], FUN = sum)
aggregate(x = a_rate[c(3,4,5)], by = a_rate[c(1,6,7)], FUN = sum)
aggregate(a_rate[3], a_rate[1], sum)
a_rate[687:690,]
a_rate[688,3]
decision_regions[687:690,]
aggregate(x = decision_regions[c(3,4,5)], by = decision_regions[c(1,6,7)], FUN = sum)
copy = aggregate(x = decision_regions[c(3,4,5)], by = decision_regions[c(1,6,7)], FUN = sum)
head(copy)
copy = aggregate(x = decision_regions[c(3,4,5)], by = decision_regions[c(1,7)], FUN = sum)
head(copy)
copy = aggregate(x = decision_regions[c(3,4,5)], by = decision_regions[c(1,6)], FUN = sum)
head(copy)
copy
years = unique(copy$Year)
years
print(i)
for (i in 1:length(years))
{
print(i)
}
print(years[i])
copy[copy$Year == 2021,]
copy = aggregate(x = decision_regions[c(3,4,5)], by = decision_regions[c(1,6)], FUN = sum)
years = unique(copy$Year)
years
for (i in 1:length(years))
{
print(years[i])
values = copy[copy$Year == i,]
r_rank = values[order(-values$`Rejected decisions`)]
r_rank$`Reject Rank` = row(r_rank)[,1]
if (i != 1) {
final_list = rbind(final_list, r_rank)
}
else
{
final_list = r_rank
}
}
row(r_rank)[,1]
r_rank
years = unique(copy$Year)
years
for (i in 1:length(years))
{
print(years[i])
values = copy[copy$Year == years[i],]
r_rank = values[order(-values$`Rejected decisions`)]
r_rank$`Reject Rank` = row(r_rank)[,1]
if (i != 1) {
final_list = rbind(final_list, r_rank)
}
else
{
final_list = r_rank
}
}
final_list
final_list[order(final_list$`Rejected decisions`),]
year_list = final_list[final_list$Year == 2020,]
year_list = final_list[final_list$Year == 2020,]
year_list[order(year_list$`Rejected decisions`),]
year_list[order(-year_list$`Rejected decisions`),]
row(r_rank)[,1]
r_rank
year_list[order(-year_list$`Rejected decisions`)]
year_list[order(-year_list$`Rejected decisions`),]
copy = aggregate(x = decision_regions[c(3,4,5)], by = decision_regions[c(1,6)], FUN = sum)
years = unique(copy$Year)
years
for (i in 1:length(years))
{
print(years[i])
values = copy[copy$Year == years[i],]
r_rank = values[order(-values$`Rejected decisions`),]
r_rank$`Reject Rank` = row(r_rank)[,1]
if (i != 1) {
final_list = rbind(final_list, r_rank)
}
else
{
final_list = r_rank
}
}
year_list = final_list[final_list$Year == 2020,]
year_list[order(-year_list$`Rejected decisions`),]
copy1 = aggregate(x = decision_regions[c(3,4,5)], by = decision_regions[c(1,6)], FUN = sum)
decision_regions[c(3,4,5)]
head(decision_regions[c(3,4,5)])
names(decision_regions)
head(decision_regions[c(9,10)])
copy2 = aggregate(x = decision_regions[c(9,10)], by = decision_regions[c(1,6)], FUN = sum)
head(copy2)
copy2
decision_regions
copy2
decision_regions
copy2 = aggregate(x = decision_regions[c(9,10)], by = decision_regions[c(1,6)], FUN = mean)
copy2
copy1 = aggregate(x = decision_regions[c(3,4,5)], by = decision_regions[c(1,6)], FUN = sum)
copy1
copy2
copy2[c(1,2)] = NULL
cbind(copy1, copy2)
copy = cbind(copy1, copy2)
head(copy)
years = unique(copy$Year)
for (i in 1:length(years))
years = unique(copy$Year)
for (i in 1:length(years))
{
print(years[i])
values = copy[copy$Year == years[i],]
r_rank = values[order(-values$`Rejection Rate`),]
r_rank$`Reject Rank` = row(r_rank)[,1]
if (i != 1) {
final_list = rbind(final_list, r_rank)
}
else
{
final_list = r_rank
}
}
year_list = final_list[final_list$Year == 2020,]
year_list[order(-year_list$`Rejected decisions`),]
year_list[order(-year_list$`Rejection Rate`),]
year_list = final_list[final_list$Year == 2020,]
year_list[order(-year_list$`Rejection Rate`),]
year_list = final_list[final_list$Year == 2020,]
year_list[order(-year_list$`Rejection Rate`),]
year_list = final_list[final_list$Year == 2010,]
year_list[order(-year_list$`Rejection Rate`),]
rejection_rank = final_list
rejection_rank = final_list
rejection_rank
write.csv(rejection_rank, file = "rejection_rank_countries.csv",
row.names = F, quote = F)
